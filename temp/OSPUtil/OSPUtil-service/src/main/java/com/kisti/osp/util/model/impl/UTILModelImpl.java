/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.util.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.kisti.osp.util.model.UTIL;
import com.kisti.osp.util.model.UTILModel;
import com.kisti.osp.util.model.UTILSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UTIL service. Represents a row in the &quot;OSPUTIL_UTIL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UTILModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UTILImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UTILImpl
 * @see UTIL
 * @see UTILModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class UTILModelImpl extends BaseModelImpl<UTIL> implements UTILModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a util model instance should use the {@link UTIL} interface instead.
	 */
	public static final String TABLE_NAME = "OSPUTIL_UTIL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "utilId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("utilId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table OSPUTIL_UTIL (uuid_ VARCHAR(75) null,utilId LONG not null primary key,groupId LONG,companyId LONG)";
	public static final String TABLE_SQL_DROP = "drop table OSPUTIL_UTIL";
	public static final String ORDER_BY_JPQL = " ORDER BY util.utilId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSPUTIL_UTIL.utilId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.kisti.osp.util.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.util.model.UTIL"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.kisti.osp.util.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.util.model.UTIL"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.kisti.osp.util.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kisti.osp.util.model.UTIL"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long UTILID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UTIL toModel(UTILSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UTIL model = new UTILImpl();

		model.setUuid(soapModel.getUuid());
		model.setUtilId(soapModel.getUtilId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UTIL> toModels(UTILSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UTIL> models = new ArrayList<UTIL>(soapModels.length);

		for (UTILSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.kisti.osp.util.service.util.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.util.model.UTIL"));

	public UTILModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _utilId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUtilId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _utilId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UTIL.class;
	}

	@Override
	public String getModelClassName() {
		return UTIL.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("utilId", getUtilId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long utilId = (Long)attributes.get("utilId");

		if (utilId != null) {
			setUtilId(utilId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getUtilId() {
		return _utilId;
	}

	@Override
	public void setUtilId(long utilId) {
		_utilId = utilId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			UTIL.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UTIL toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UTIL)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UTILImpl utilImpl = new UTILImpl();

		utilImpl.setUuid(getUuid());
		utilImpl.setUtilId(getUtilId());
		utilImpl.setGroupId(getGroupId());
		utilImpl.setCompanyId(getCompanyId());

		utilImpl.resetOriginalValues();

		return utilImpl;
	}

	@Override
	public int compareTo(UTIL util) {
		long primaryKey = util.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UTIL)) {
			return false;
		}

		UTIL util = (UTIL)obj;

		long primaryKey = util.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UTILModelImpl utilModelImpl = this;

		utilModelImpl._originalUuid = utilModelImpl._uuid;

		utilModelImpl._originalGroupId = utilModelImpl._groupId;

		utilModelImpl._setOriginalGroupId = false;

		utilModelImpl._originalCompanyId = utilModelImpl._companyId;

		utilModelImpl._setOriginalCompanyId = false;

		utilModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UTIL> toCacheModel() {
		UTILCacheModel utilCacheModel = new UTILCacheModel();

		utilCacheModel.uuid = getUuid();

		String uuid = utilCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			utilCacheModel.uuid = null;
		}

		utilCacheModel.utilId = getUtilId();

		utilCacheModel.groupId = getGroupId();

		utilCacheModel.companyId = getCompanyId();

		return utilCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", utilId=");
		sb.append(getUtilId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.util.model.UTIL");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>utilId</column-name><column-value><![CDATA[");
		sb.append(getUtilId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UTIL.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UTIL.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _utilId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _columnBitmask;
	private UTIL _escapedModel;
}