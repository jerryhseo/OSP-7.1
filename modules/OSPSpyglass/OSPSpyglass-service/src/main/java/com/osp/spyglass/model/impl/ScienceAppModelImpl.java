/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.osp.spyglass.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;

import com.osp.spyglass.model.ScienceApp;
import com.osp.spyglass.model.ScienceAppModel;
import com.osp.spyglass.model.ScienceAppSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the ScienceApp service. Represents a row in the &quot;SPYGLASS_ScienceApp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ScienceAppModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScienceAppImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see ScienceAppImpl
 * @see ScienceApp
 * @see ScienceAppModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ScienceAppModelImpl extends BaseModelImpl<ScienceApp>
	implements ScienceAppModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a science app model instance should use the {@link ScienceApp} interface instead.
	 */
	public static final String TABLE_NAME = "SPYGLASS_ScienceApp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "scienceAppId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "version", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "descriptionId", Types.VARCHAR },
			{ "previousVersionId", Types.BIGINT },
			{ "iconId", Types.VARCHAR },
			{ "manualId", Types.VARCHAR },
			{ "exeFileName", Types.VARCHAR },
			{ "appType", Types.VARCHAR },
			{ "runType", Types.VARCHAR },
			{ "authorId", Types.BIGINT },
			{ "registerStage", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "openLevel", Types.VARCHAR },
			{ "license", Types.VARCHAR },
			{ "srcFileName", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("scienceAppId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descriptionId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("previousVersionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("iconId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exeFileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("runType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("registerStage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("openLevel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("license", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("srcFileName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table SPYGLASS_ScienceApp (uuid_ VARCHAR(75) null,scienceAppId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,version VARCHAR(75) null,title STRING null,descriptionId STRING null,previousVersionId LONG,iconId STRING null,manualId STRING null,exeFileName VARCHAR(75) null,appType VARCHAR(75) null,runType VARCHAR(75) null,authorId LONG,registerStage VARCHAR(75) null,status INTEGER,openLevel VARCHAR(75) null,license VARCHAR(75) null,srcFileName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SPYGLASS_ScienceApp";
	public static final String ORDER_BY_JPQL = " ORDER BY scienceApp.createDate DESC, scienceApp.version DESC";
	public static final String ORDER_BY_SQL = " ORDER BY SPYGLASS_ScienceApp.createDate DESC, SPYGLASS_ScienceApp.version DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.osp.spyglass.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.osp.spyglass.model.ScienceApp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.osp.spyglass.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.osp.spyglass.model.ScienceApp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.osp.spyglass.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.osp.spyglass.model.ScienceApp"),
			true);
	public static final long APPTYPE_COLUMN_BITMASK = 1L;
	public static final long AUTHORID_COLUMN_BITMASK = 2L;
	public static final long COMPANYID_COLUMN_BITMASK = 4L;
	public static final long GROUPID_COLUMN_BITMASK = 8L;
	public static final long NAME_COLUMN_BITMASK = 16L;
	public static final long RUNTYPE_COLUMN_BITMASK = 32L;
	public static final long STATUS_COLUMN_BITMASK = 64L;
	public static final long TITLE_COLUMN_BITMASK = 128L;
	public static final long USERID_COLUMN_BITMASK = 256L;
	public static final long UUID_COLUMN_BITMASK = 512L;
	public static final long VERSION_COLUMN_BITMASK = 1024L;
	public static final long CREATEDATE_COLUMN_BITMASK = 2048L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ScienceApp toModel(ScienceAppSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ScienceApp model = new ScienceAppImpl();

		model.setUuid(soapModel.getUuid());
		model.setScienceAppId(soapModel.getScienceAppId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setVersion(soapModel.getVersion());
		model.setTitle(soapModel.getTitle());
		model.setDescriptionId(soapModel.getDescriptionId());
		model.setPreviousVersionId(soapModel.getPreviousVersionId());
		model.setIconId(soapModel.getIconId());
		model.setManualId(soapModel.getManualId());
		model.setExeFileName(soapModel.getExeFileName());
		model.setAppType(soapModel.getAppType());
		model.setRunType(soapModel.getRunType());
		model.setAuthorId(soapModel.getAuthorId());
		model.setRegisterStage(soapModel.getRegisterStage());
		model.setStatus(soapModel.getStatus());
		model.setOpenLevel(soapModel.getOpenLevel());
		model.setLicense(soapModel.getLicense());
		model.setSrcFileName(soapModel.getSrcFileName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ScienceApp> toModels(ScienceAppSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ScienceApp> models = new ArrayList<ScienceApp>(soapModels.length);

		for (ScienceAppSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.osp.spyglass.service.util.ServiceProps.get(
				"lock.expiration.time.com.osp.spyglass.model.ScienceApp"));

	public ScienceAppModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _scienceAppId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setScienceAppId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _scienceAppId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ScienceApp.class;
	}

	@Override
	public String getModelClassName() {
		return ScienceApp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("version", getVersion());
		attributes.put("title", getTitle());
		attributes.put("descriptionId", getDescriptionId());
		attributes.put("previousVersionId", getPreviousVersionId());
		attributes.put("iconId", getIconId());
		attributes.put("manualId", getManualId());
		attributes.put("exeFileName", getExeFileName());
		attributes.put("appType", getAppType());
		attributes.put("runType", getRunType());
		attributes.put("authorId", getAuthorId());
		attributes.put("registerStage", getRegisterStage());
		attributes.put("status", getStatus());
		attributes.put("openLevel", getOpenLevel());
		attributes.put("license", getLicense());
		attributes.put("srcFileName", getSrcFileName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long scienceAppId = (Long)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String descriptionId = (String)attributes.get("descriptionId");

		if (descriptionId != null) {
			setDescriptionId(descriptionId);
		}

		Long previousVersionId = (Long)attributes.get("previousVersionId");

		if (previousVersionId != null) {
			setPreviousVersionId(previousVersionId);
		}

		String iconId = (String)attributes.get("iconId");

		if (iconId != null) {
			setIconId(iconId);
		}

		String manualId = (String)attributes.get("manualId");

		if (manualId != null) {
			setManualId(manualId);
		}

		String exeFileName = (String)attributes.get("exeFileName");

		if (exeFileName != null) {
			setExeFileName(exeFileName);
		}

		String appType = (String)attributes.get("appType");

		if (appType != null) {
			setAppType(appType);
		}

		String runType = (String)attributes.get("runType");

		if (runType != null) {
			setRunType(runType);
		}

		Long authorId = (Long)attributes.get("authorId");

		if (authorId != null) {
			setAuthorId(authorId);
		}

		String registerStage = (String)attributes.get("registerStage");

		if (registerStage != null) {
			setRegisterStage(registerStage);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String openLevel = (String)attributes.get("openLevel");

		if (openLevel != null) {
			setOpenLevel(openLevel);
		}

		String license = (String)attributes.get("license");

		if (license != null) {
			setLicense(license);
		}

		String srcFileName = (String)attributes.get("srcFileName");

		if (srcFileName != null) {
			setSrcFileName(srcFileName);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON(include = false)
	@Override
	public long getScienceAppId() {
		return _scienceAppId;
	}

	@Override
	public void setScienceAppId(long scienceAppId) {
		_scienceAppId = scienceAppId;
	}

	@JSON(include = false)
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON(include = false)
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON(include = false)
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return "";
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_columnBitmask = -1L;

		if (_originalVersion == null) {
			_originalVersion = _version;
		}

		_version = version;
	}

	public String getOriginalVersion() {
		return GetterUtil.getString(_originalVersion);
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public String getDescriptionId() {
		if (_descriptionId == null) {
			return "";
		}
		else {
			return _descriptionId;
		}
	}

	@Override
	public String getDescriptionId(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescriptionId(languageId);
	}

	@Override
	public String getDescriptionId(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescriptionId(languageId, useDefault);
	}

	@Override
	public String getDescriptionId(String languageId) {
		return LocalizationUtil.getLocalization(getDescriptionId(), languageId);
	}

	@Override
	public String getDescriptionId(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescriptionId(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionIdCurrentLanguageId() {
		return _descriptionIdCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionIdCurrentValue() {
		Locale locale = getLocale(_descriptionIdCurrentLanguageId);

		return getDescriptionId(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionIdMap() {
		return LocalizationUtil.getLocalizationMap(getDescriptionId());
	}

	@Override
	public void setDescriptionId(String descriptionId) {
		_descriptionId = descriptionId;
	}

	@Override
	public void setDescriptionId(String descriptionId, Locale locale) {
		setDescriptionId(descriptionId, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionId(String descriptionId, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(descriptionId)) {
			setDescriptionId(LocalizationUtil.updateLocalization(
					getDescriptionId(), "DescriptionId", descriptionId,
					languageId, defaultLanguageId));
		}
		else {
			setDescriptionId(LocalizationUtil.removeLocalization(
					getDescriptionId(), "DescriptionId", languageId));
		}
	}

	@Override
	public void setDescriptionIdCurrentLanguageId(String languageId) {
		_descriptionIdCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionIdMap(Map<Locale, String> descriptionIdMap) {
		setDescriptionIdMap(descriptionIdMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionIdMap(Map<Locale, String> descriptionIdMap,
		Locale defaultLocale) {
		if (descriptionIdMap == null) {
			return;
		}

		setDescriptionId(LocalizationUtil.updateLocalization(descriptionIdMap,
				getDescriptionId(), "DescriptionId",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getPreviousVersionId() {
		return _previousVersionId;
	}

	@Override
	public void setPreviousVersionId(long previousVersionId) {
		_previousVersionId = previousVersionId;
	}

	@JSON
	@Override
	public String getIconId() {
		if (_iconId == null) {
			return "";
		}
		else {
			return _iconId;
		}
	}

	@Override
	public String getIconId(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getIconId(languageId);
	}

	@Override
	public String getIconId(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getIconId(languageId, useDefault);
	}

	@Override
	public String getIconId(String languageId) {
		return LocalizationUtil.getLocalization(getIconId(), languageId);
	}

	@Override
	public String getIconId(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getIconId(), languageId,
			useDefault);
	}

	@Override
	public String getIconIdCurrentLanguageId() {
		return _iconIdCurrentLanguageId;
	}

	@JSON
	@Override
	public String getIconIdCurrentValue() {
		Locale locale = getLocale(_iconIdCurrentLanguageId);

		return getIconId(locale);
	}

	@Override
	public Map<Locale, String> getIconIdMap() {
		return LocalizationUtil.getLocalizationMap(getIconId());
	}

	@Override
	public void setIconId(String iconId) {
		_iconId = iconId;
	}

	@Override
	public void setIconId(String iconId, Locale locale) {
		setIconId(iconId, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setIconId(String iconId, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(iconId)) {
			setIconId(LocalizationUtil.updateLocalization(getIconId(),
					"IconId", iconId, languageId, defaultLanguageId));
		}
		else {
			setIconId(LocalizationUtil.removeLocalization(getIconId(),
					"IconId", languageId));
		}
	}

	@Override
	public void setIconIdCurrentLanguageId(String languageId) {
		_iconIdCurrentLanguageId = languageId;
	}

	@Override
	public void setIconIdMap(Map<Locale, String> iconIdMap) {
		setIconIdMap(iconIdMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setIconIdMap(Map<Locale, String> iconIdMap, Locale defaultLocale) {
		if (iconIdMap == null) {
			return;
		}

		setIconId(LocalizationUtil.updateLocalization(iconIdMap, getIconId(),
				"IconId", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getManualId() {
		if (_manualId == null) {
			return "";
		}
		else {
			return _manualId;
		}
	}

	@Override
	public String getManualId(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getManualId(languageId);
	}

	@Override
	public String getManualId(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getManualId(languageId, useDefault);
	}

	@Override
	public String getManualId(String languageId) {
		return LocalizationUtil.getLocalization(getManualId(), languageId);
	}

	@Override
	public String getManualId(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getManualId(), languageId,
			useDefault);
	}

	@Override
	public String getManualIdCurrentLanguageId() {
		return _manualIdCurrentLanguageId;
	}

	@JSON
	@Override
	public String getManualIdCurrentValue() {
		Locale locale = getLocale(_manualIdCurrentLanguageId);

		return getManualId(locale);
	}

	@Override
	public Map<Locale, String> getManualIdMap() {
		return LocalizationUtil.getLocalizationMap(getManualId());
	}

	@Override
	public void setManualId(String manualId) {
		_manualId = manualId;
	}

	@Override
	public void setManualId(String manualId, Locale locale) {
		setManualId(manualId, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setManualId(String manualId, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(manualId)) {
			setManualId(LocalizationUtil.updateLocalization(getManualId(),
					"ManualId", manualId, languageId, defaultLanguageId));
		}
		else {
			setManualId(LocalizationUtil.removeLocalization(getManualId(),
					"ManualId", languageId));
		}
	}

	@Override
	public void setManualIdCurrentLanguageId(String languageId) {
		_manualIdCurrentLanguageId = languageId;
	}

	@Override
	public void setManualIdMap(Map<Locale, String> manualIdMap) {
		setManualIdMap(manualIdMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setManualIdMap(Map<Locale, String> manualIdMap,
		Locale defaultLocale) {
		if (manualIdMap == null) {
			return;
		}

		setManualId(LocalizationUtil.updateLocalization(manualIdMap,
				getManualId(), "ManualId",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getExeFileName() {
		if (_exeFileName == null) {
			return "";
		}
		else {
			return _exeFileName;
		}
	}

	@Override
	public void setExeFileName(String exeFileName) {
		_exeFileName = exeFileName;
	}

	@JSON
	@Override
	public String getAppType() {
		if (_appType == null) {
			return "";
		}
		else {
			return _appType;
		}
	}

	@Override
	public void setAppType(String appType) {
		_columnBitmask |= APPTYPE_COLUMN_BITMASK;

		if (_originalAppType == null) {
			_originalAppType = _appType;
		}

		_appType = appType;
	}

	public String getOriginalAppType() {
		return GetterUtil.getString(_originalAppType);
	}

	@JSON
	@Override
	public String getRunType() {
		if (_runType == null) {
			return "";
		}
		else {
			return _runType;
		}
	}

	@Override
	public void setRunType(String runType) {
		_columnBitmask |= RUNTYPE_COLUMN_BITMASK;

		if (_originalRunType == null) {
			_originalRunType = _runType;
		}

		_runType = runType;
	}

	public String getOriginalRunType() {
		return GetterUtil.getString(_originalRunType);
	}

	@JSON
	@Override
	public long getAuthorId() {
		return _authorId;
	}

	@Override
	public void setAuthorId(long authorId) {
		_columnBitmask |= AUTHORID_COLUMN_BITMASK;

		if (!_setOriginalAuthorId) {
			_setOriginalAuthorId = true;

			_originalAuthorId = _authorId;
		}

		_authorId = authorId;
	}

	public long getOriginalAuthorId() {
		return _originalAuthorId;
	}

	@JSON
	@Override
	public String getRegisterStage() {
		if (_registerStage == null) {
			return "";
		}
		else {
			return _registerStage;
		}
	}

	@Override
	public void setRegisterStage(String registerStage) {
		_registerStage = registerStage;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public String getOpenLevel() {
		if (_openLevel == null) {
			return "";
		}
		else {
			return _openLevel;
		}
	}

	@Override
	public void setOpenLevel(String openLevel) {
		_openLevel = openLevel;
	}

	@JSON
	@Override
	public String getLicense() {
		if (_license == null) {
			return "";
		}
		else {
			return _license;
		}
	}

	@Override
	public void setLicense(String license) {
		_license = license;
	}

	@JSON
	@Override
	public String getSrcFileName() {
		if (_srcFileName == null) {
			return "";
		}
		else {
			return _srcFileName;
		}
	}

	@Override
	public void setSrcFileName(String srcFileName) {
		_srcFileName = srcFileName;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ScienceApp.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ScienceApp.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionIdMap = getDescriptionIdMap();

		for (Map.Entry<Locale, String> entry : descriptionIdMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> iconIdMap = getIconIdMap();

		for (Map.Entry<Locale, String> entry : iconIdMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> manualIdMap = getManualIdMap();

		for (Map.Entry<Locale, String> entry : manualIdMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(ScienceApp.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String descriptionId = getDescriptionId(defaultLocale);

		if (Validator.isNull(descriptionId)) {
			setDescriptionId(getDescriptionId(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setDescriptionId(getDescriptionId(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String iconId = getIconId(defaultLocale);

		if (Validator.isNull(iconId)) {
			setIconId(getIconId(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setIconId(getIconId(defaultLocale), defaultLocale, defaultLocale);
		}

		String manualId = getManualId(defaultLocale);

		if (Validator.isNull(manualId)) {
			setManualId(getManualId(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setManualId(getManualId(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public ScienceApp toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ScienceApp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScienceAppImpl scienceAppImpl = new ScienceAppImpl();

		scienceAppImpl.setUuid(getUuid());
		scienceAppImpl.setScienceAppId(getScienceAppId());
		scienceAppImpl.setCompanyId(getCompanyId());
		scienceAppImpl.setGroupId(getGroupId());
		scienceAppImpl.setUserId(getUserId());
		scienceAppImpl.setUserName(getUserName());
		scienceAppImpl.setCreateDate(getCreateDate());
		scienceAppImpl.setModifiedDate(getModifiedDate());
		scienceAppImpl.setName(getName());
		scienceAppImpl.setVersion(getVersion());
		scienceAppImpl.setTitle(getTitle());
		scienceAppImpl.setDescriptionId(getDescriptionId());
		scienceAppImpl.setPreviousVersionId(getPreviousVersionId());
		scienceAppImpl.setIconId(getIconId());
		scienceAppImpl.setManualId(getManualId());
		scienceAppImpl.setExeFileName(getExeFileName());
		scienceAppImpl.setAppType(getAppType());
		scienceAppImpl.setRunType(getRunType());
		scienceAppImpl.setAuthorId(getAuthorId());
		scienceAppImpl.setRegisterStage(getRegisterStage());
		scienceAppImpl.setStatus(getStatus());
		scienceAppImpl.setOpenLevel(getOpenLevel());
		scienceAppImpl.setLicense(getLicense());
		scienceAppImpl.setSrcFileName(getSrcFileName());

		scienceAppImpl.resetOriginalValues();

		return scienceAppImpl;
	}

	@Override
	public int compareTo(ScienceApp scienceApp) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), scienceApp.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = getVersion().compareTo(scienceApp.getVersion());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ScienceApp)) {
			return false;
		}

		ScienceApp scienceApp = (ScienceApp)obj;

		long primaryKey = scienceApp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ScienceAppModelImpl scienceAppModelImpl = this;

		scienceAppModelImpl._originalUuid = scienceAppModelImpl._uuid;

		scienceAppModelImpl._originalCompanyId = scienceAppModelImpl._companyId;

		scienceAppModelImpl._setOriginalCompanyId = false;

		scienceAppModelImpl._originalGroupId = scienceAppModelImpl._groupId;

		scienceAppModelImpl._setOriginalGroupId = false;

		scienceAppModelImpl._originalUserId = scienceAppModelImpl._userId;

		scienceAppModelImpl._setOriginalUserId = false;

		scienceAppModelImpl._setModifiedDate = false;

		scienceAppModelImpl._originalName = scienceAppModelImpl._name;

		scienceAppModelImpl._originalVersion = scienceAppModelImpl._version;

		scienceAppModelImpl._originalTitle = scienceAppModelImpl._title;

		scienceAppModelImpl._originalAppType = scienceAppModelImpl._appType;

		scienceAppModelImpl._originalRunType = scienceAppModelImpl._runType;

		scienceAppModelImpl._originalAuthorId = scienceAppModelImpl._authorId;

		scienceAppModelImpl._setOriginalAuthorId = false;

		scienceAppModelImpl._originalStatus = scienceAppModelImpl._status;

		scienceAppModelImpl._setOriginalStatus = false;

		scienceAppModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ScienceApp> toCacheModel() {
		ScienceAppCacheModel scienceAppCacheModel = new ScienceAppCacheModel();

		scienceAppCacheModel.uuid = getUuid();

		String uuid = scienceAppCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			scienceAppCacheModel.uuid = null;
		}

		scienceAppCacheModel.scienceAppId = getScienceAppId();

		scienceAppCacheModel.companyId = getCompanyId();

		scienceAppCacheModel.groupId = getGroupId();

		scienceAppCacheModel.userId = getUserId();

		scienceAppCacheModel.userName = getUserName();

		String userName = scienceAppCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			scienceAppCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			scienceAppCacheModel.createDate = createDate.getTime();
		}
		else {
			scienceAppCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			scienceAppCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			scienceAppCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		scienceAppCacheModel.name = getName();

		String name = scienceAppCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			scienceAppCacheModel.name = null;
		}

		scienceAppCacheModel.version = getVersion();

		String version = scienceAppCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			scienceAppCacheModel.version = null;
		}

		scienceAppCacheModel.title = getTitle();

		String title = scienceAppCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			scienceAppCacheModel.title = null;
		}

		scienceAppCacheModel.descriptionId = getDescriptionId();

		String descriptionId = scienceAppCacheModel.descriptionId;

		if ((descriptionId != null) && (descriptionId.length() == 0)) {
			scienceAppCacheModel.descriptionId = null;
		}

		scienceAppCacheModel.previousVersionId = getPreviousVersionId();

		scienceAppCacheModel.iconId = getIconId();

		String iconId = scienceAppCacheModel.iconId;

		if ((iconId != null) && (iconId.length() == 0)) {
			scienceAppCacheModel.iconId = null;
		}

		scienceAppCacheModel.manualId = getManualId();

		String manualId = scienceAppCacheModel.manualId;

		if ((manualId != null) && (manualId.length() == 0)) {
			scienceAppCacheModel.manualId = null;
		}

		scienceAppCacheModel.exeFileName = getExeFileName();

		String exeFileName = scienceAppCacheModel.exeFileName;

		if ((exeFileName != null) && (exeFileName.length() == 0)) {
			scienceAppCacheModel.exeFileName = null;
		}

		scienceAppCacheModel.appType = getAppType();

		String appType = scienceAppCacheModel.appType;

		if ((appType != null) && (appType.length() == 0)) {
			scienceAppCacheModel.appType = null;
		}

		scienceAppCacheModel.runType = getRunType();

		String runType = scienceAppCacheModel.runType;

		if ((runType != null) && (runType.length() == 0)) {
			scienceAppCacheModel.runType = null;
		}

		scienceAppCacheModel.authorId = getAuthorId();

		scienceAppCacheModel.registerStage = getRegisterStage();

		String registerStage = scienceAppCacheModel.registerStage;

		if ((registerStage != null) && (registerStage.length() == 0)) {
			scienceAppCacheModel.registerStage = null;
		}

		scienceAppCacheModel.status = getStatus();

		scienceAppCacheModel.openLevel = getOpenLevel();

		String openLevel = scienceAppCacheModel.openLevel;

		if ((openLevel != null) && (openLevel.length() == 0)) {
			scienceAppCacheModel.openLevel = null;
		}

		scienceAppCacheModel.license = getLicense();

		String license = scienceAppCacheModel.license;

		if ((license != null) && (license.length() == 0)) {
			scienceAppCacheModel.license = null;
		}

		scienceAppCacheModel.srcFileName = getSrcFileName();

		String srcFileName = scienceAppCacheModel.srcFileName;

		if ((srcFileName != null) && (srcFileName.length() == 0)) {
			scienceAppCacheModel.srcFileName = null;
		}

		return scienceAppCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", descriptionId=");
		sb.append(getDescriptionId());
		sb.append(", previousVersionId=");
		sb.append(getPreviousVersionId());
		sb.append(", iconId=");
		sb.append(getIconId());
		sb.append(", manualId=");
		sb.append(getManualId());
		sb.append(", exeFileName=");
		sb.append(getExeFileName());
		sb.append(", appType=");
		sb.append(getAppType());
		sb.append(", runType=");
		sb.append(getRunType());
		sb.append(", authorId=");
		sb.append(getAuthorId());
		sb.append(", registerStage=");
		sb.append(getRegisterStage());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", openLevel=");
		sb.append(getOpenLevel());
		sb.append(", license=");
		sb.append(getLicense());
		sb.append(", srcFileName=");
		sb.append(getSrcFileName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("com.osp.spyglass.model.ScienceApp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descriptionId</column-name><column-value><![CDATA[");
		sb.append(getDescriptionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousVersionId</column-name><column-value><![CDATA[");
		sb.append(getPreviousVersionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iconId</column-name><column-value><![CDATA[");
		sb.append(getIconId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manualId</column-name><column-value><![CDATA[");
		sb.append(getManualId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exeFileName</column-name><column-value><![CDATA[");
		sb.append(getExeFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appType</column-name><column-value><![CDATA[");
		sb.append(getAppType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>runType</column-name><column-value><![CDATA[");
		sb.append(getRunType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authorId</column-name><column-value><![CDATA[");
		sb.append(getAuthorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registerStage</column-name><column-value><![CDATA[");
		sb.append(getRegisterStage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>openLevel</column-name><column-value><![CDATA[");
		sb.append(getOpenLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>license</column-name><column-value><![CDATA[");
		sb.append(getLicense());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>srcFileName</column-name><column-value><![CDATA[");
		sb.append(getSrcFileName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ScienceApp.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ScienceApp.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _scienceAppId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _originalName;
	private String _version;
	private String _originalVersion;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _originalTitle;
	private String _descriptionId;
	private String _descriptionIdCurrentLanguageId;
	private long _previousVersionId;
	private String _iconId;
	private String _iconIdCurrentLanguageId;
	private String _manualId;
	private String _manualIdCurrentLanguageId;
	private String _exeFileName;
	private String _appType;
	private String _originalAppType;
	private String _runType;
	private String _originalRunType;
	private long _authorId;
	private long _originalAuthorId;
	private boolean _setOriginalAuthorId;
	private String _registerStage;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private String _openLevel;
	private String _license;
	private String _srcFileName;
	private long _columnBitmask;
	private ScienceApp _escapedModel;
}